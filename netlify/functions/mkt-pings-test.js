// netlify/functions/mkt-pings-test.js
// –†—É—á–Ω–æ–π –ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ¬´–∫–∞–∫ –≤ –∫—Ä–æ–Ω–µ¬ª.
// ?only=uid1,uid2 ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// ?dry=1          ‚Äî —Å—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω: –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–≤—å—é

import { getStore } from '@netlify/blobs';

const SITE_ID = process.env.NETLIFY_BLOBS_SITE_ID || '';
const TOKEN   = process.env.NETLIFY_BLOBS_TOKEN   || '';

const NOTIFY_ENDPOINT = '/.netlify/functions/notify';

function dayKey(ts){
  const d = new Date(ts || Date.now());
  return `${d.getUTCFullYear()}-${d.getUTCMonth()+1}-${d.getUTCDate()}`; // UTC
}

async function postNotify(baseUrl, payload){
  const url = new URL(NOTIFY_ENDPOINT, baseUrl).toString();
  const r = await fetch(url, {
    method:'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify(payload),
  });
  const j = await r.json().catch(()=> ({}));
  if (!r.ok || j?.ok === false) throw new Error(j?.error || `${r.status}`);
  return j;
}

/* ------ —Ç–µ–∫—Å—Ç—ã ------ */
const CART_VARIANTS = [
  ({title, count}) => `–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –∂–¥—ë—Ç: ¬´${title}¬ª${count>1?` + –µ—â—ë ${count-1}`:''}. –û—Ñ–æ—Ä–º–∏–º?`,
  ({title})        => `–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ ¬´${title}¬ª? –í—Å–µ–≥–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤ –¥–æ –∑–∞–∫–∞–∑–∞ ‚ú®`,
  ({title})        => `¬´${title}¬ª –≤—Å—ë –µ—â—ë –≤ –∫–æ—Ä–∑–∏–Ω–µ. –í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É?`,
  ({title})        => `–ß—É—Ç—å-—á—É—Ç—å –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–æ –ø–æ–∫—É–ø–∫–∏: ¬´${title}¬ª. –ú—ã –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏!`,
  ({title})        => `–ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å ‚Äî ¬´${title}¬ª –∂–¥—ë—Ç –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üëÄ`,
  ({title})        => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤ –∫–æ—Ä–∑–∏–Ω–µ ¬´${title}¬ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ!`,
  ({title})        => `–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑? ¬´${title}¬ª —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ.`,
  ({title, count}) => `–ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ: ¬´${title}¬ª${count>1?` –∏ –µ—â—ë ${count-1}`:''}. –£—Å–ø–µ–µ–º —Å–µ–≥–æ–¥–Ω—è?`,
];
const FAV_VARIANTS = [
  () => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ üëÄ`,
  () => `–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–µ–∂–∞—Ç –≤–∞—à–∏ –Ω–∞—Ö–æ–¥–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ú®`,
  () => `–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É ‚Äî –≤–¥—Ä—É–≥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏?`,
  () => `–õ—é–±–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∂–¥—É—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!`,
  () => `–°–¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥? –û—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä.`,
  () => `–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä—ã.`,
];
function pickVariant(list, idx){
  const len = list.length || 1;
  const i = Number.isInteger(idx) ? ((idx % len)+len)%len : 0;
  return { build: list[i], nextIdx: (i+1)%len };
}

export async function handler(event){
  try{
    const base = (process.env.URL || process.env.DEPLOY_URL || '').replace(/\/+$/,'');
    if (!base) return { statusCode:500, body: JSON.stringify({ ok:false, error:'no base url' }) };

    if (!SITE_ID || !TOKEN) {
      return { statusCode:500, body: JSON.stringify({ ok:false, error:'NETLIFY_BLOBS_SITE_ID or NETLIFY_BLOBS_TOKEN is missing' }) };
    }

    // –ë–µ—Ä—ë–º store —Å —è–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const usersStore = getStore({ name:'users', siteID:SITE_ID, token:TOKEN });

    const qs   = event?.queryStringParameters || {};
    const dry  = String(qs.dry || '') === '1';
    const onlySet = new Set(String(qs.only || '').split(',').map(s=>s.trim()).filter(Boolean));

    const listed = await usersStore.list({ prefix:'user__', paginate:false }).catch(()=>null);
    const blobs = listed?.blobs || [];

    const now = Date.now();
    const today = dayKey(now);
    const THREE_DAYS = 3*24*60*60*1000;

    let sent = 0, considered = 0;
    const previews = [];

    for (const entry of blobs){
      const u = await usersStore.get(entry.key, { type:'json', consistency:'strong' }).catch(()=>null);
      if (!u) continue;

      if (onlySet.size && !onlySet.has(String(u.uid||''))) continue;

      const chatId = String(u?.chatId || '');
      if (!/^\d+$/.test(chatId)) continue;

      const cart = Array.isArray(u.cart) ? u.cart : [];
      const favs = Array.isArray(u.favorites) ? u.favorites : [];
      const hasCart = cart.length > 0;
      const hasFav  = favs.length > 0;
      if (!hasCart && !hasFav) continue;
      considered++;

      // –ö–û–†–ó–ò–ù–ê ‚Äî –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
      if (hasCart && u.lastCartReminderDay !== today){
        const first = cart[0];
        const title = String(first?.title || '—Ç–æ–≤–∞—Ä').slice(0,140);
        const count = cart.length;
        const { build, nextIdx } = pickVariant(CART_VARIANTS, u.cartVariantIdx || 0);
        const text = build({ title, count });

        if (dry){
          previews.push({ uid:u.uid, kind:'cart', text });
        }else{
          await postNotify(base, { type:'cartReminder', chat_id: chatId, title, text });
          u.lastCartReminderDay = today;
          u.cartVariantIdx = nextIdx;
          await usersStore.setJSON(entry.key, u);
          sent++;
        }
      }

      // –ò–ó–ë–†–ê–ù–ù–û–ï ‚Äî —Ä–∞–∑ –≤ 3 –¥–Ω—è
      if (hasFav && Number(u.lastFavReminderTs||0) + THREE_DAYS <= now){
        const { build, nextIdx } = pickVariant(FAV_VARIANTS, u.favVariantIdx || 0);
        const text = build({});

        if (dry){
          previews.push({ uid:u.uid, kind:'fav', text });
        }else{
          await postNotify(base, { type:'favReminder', chat_id: chatId, text });
          u.lastFavReminderTs = now;
          u.favVariantIdx = nextIdx;
          await usersStore.setJSON(entry.key, u);
          sent++;
        }
      }
    }

    return { statusCode:200, body: JSON.stringify({ ok:true, dry, considered, sent, previews }) };
  }catch(e){
    return { statusCode:500, body: JSON.stringify({ ok:false, error:String(e?.message||e) }) };
  }
}
