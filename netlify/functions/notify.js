// netlify/functions/notify.js
// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É initData) –∏–ª–∏ –∞–¥–º–∏–Ω–∞–º (–ø–æ internal-token)
//
// ENV:
//   TG_BOT_TOKEN
//   ADMIN_API_TOKEN
//   ADMIN_CHAT_ID            // –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤)
//   WEBAPP_URL
//   ALLOWED_ORIGINS

import crypto from 'node:crypto';

function parseAllowed(){ return (process.env.ALLOWED_ORIGINS||'').split(',').map(s=>s.trim()).filter(Boolean); }
function isTelegramOrigin(origin){ return origin==='https://t.me'||origin==='https://web.telegram.org'||origin==='https://telegram.org'; }
function originMatches(origin, rule){
  if (!rule||rule==='*') return true;
  if (!origin) return false;
  if (rule.startsWith('*.')){
    try{
      const host=new URL(origin).hostname;
      const suf=rule.slice(1);
      return host===rule.slice(2)||host.endsWith(suf);
    }catch{ return false; }
  }
  return origin===rule;
}
function buildCorsHeaders(origin, isInternal=false){
  const allowed = parseAllowed();
  const allow = isInternal || !allowed.length || !origin || isTelegramOrigin(origin) || allowed.some(rule=>originMatches(origin, rule));
  return {
    headers:{
      'Access-Control-Allow-Origin': allow ? (origin||'*') : 'null',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, X-Tg-Init-Data, X-Internal-Auth',
      'Access-Control-Max-Age': '86400',
      'Content-Type': 'application/json; charset=utf-8',
      'Vary':'Origin'
    },
    isAllowed: allow
  };
}

function getInternalAuth(event){
  const h=event.headers||{};
  return (h['x-internal-auth']||h['X-Internal-Auth']||'').toString().trim();
}
function isInternalCall(event){
  const t=getInternalAuth(event);
  return t && process.env.ADMIN_API_TOKEN && t===process.env.ADMIN_API_TOKEN;
}

function verifyTgInitData(raw){
  const token = process.env.TG_BOT_TOKEN||'';
  if (!token) throw new Error('TG_BOT_TOKEN not set');
  const params = new URLSearchParams(String(raw||''));
  const hash = params.get('hash'); if (!hash) throw new Error('no hash');
  const pairs=[]; for (const [k,v] of params.entries()){ if (k==='hash') continue; pairs.push(`${k}=${v}`); }
  pairs.sort();
  const dataCheckString = pairs.join('\n');
  const secretKey = crypto.createHash('sha256').update(token).digest();
  const hmac = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
  if (hmac !== hash) throw new Error('bad signature');
  const user = JSON.parse(params.get('user')||'{}');
  if (!user?.id) throw new Error('no user');
  return { uid: String(user.id) };
}

/* ------------ –ú–µ–¥–∏–∞ ------------ */
const BASE_ASSET_URL = (process.env.URL || process.env.DEPLOY_URL || '').replace(/\/+$/, '');
const TYPE_IMG = {
  orderPlaced:            '/assets/notify/order_placed1.jpg',
  orderAccepted:          '/assets/notify/order_accepted1.jpg',
  statusChanged:          '/assets/notify/status_changed1.jpg',
  orderCanceled:          '/assets/notify/order_canceled1.jpg',
  cartReminder:           '/assets/notify/cart_reminder1.jpg',
  favReminder:            '/assets/notify/fav_reminder1.jpg',
  referralJoined:         '/assets/notify/referral_joined1.jpg',
  referralOrderCashback:  '/assets/notify/referral_cashback_pending1.jpg',
  cashbackMatured:        '/assets/notify/cashback_ready1.jpg',
};
function makeDisplayOrderId(orderId, shortId){
  const s=(shortId||'').toString().trim();
  if (s) return s.toUpperCase();
  const full=(orderId||'').toString().trim();
  if (!full) return '';
  return full.slice(-6).toUpperCase();
}
async function sendTg(token, chatId, text, kb, type){
  const imgPath = TYPE_IMG[type];
  const imgUrl = (imgPath && BASE_ASSET_URL) ? `${BASE_ASSET_URL}${imgPath}` : null;

  const common = { chat_id: chatId, parse_mode:'HTML', ...(kb?{ reply_markup: { inline_keyboard: kb } }:{}) };
  const method = imgUrl ? 'sendPhoto' : 'sendMessage';
  const payload = imgUrl
    ? { ...common, photo: imgUrl, caption: text, disable_notification:false }
    : { ...common, text, disable_web_page_preview:true };

  const r = await fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)
  });
  const data = await r.json().catch(()=> ({}));
  if (!r.ok || data?.ok===false) throw new Error('telegram send failed');
}

/* –¢–∏–ø—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏: —Ç—Ä–µ–±—É–µ–º initData –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤ */
const ORDER_ONLY_USER = new Set(['orderPlaced','orderAccepted','statusChanged','orderCanceled']);

export async function handler(event){
  const origin = event.headers?.origin || event.headers?.Origin || '';
  const internal = isInternalCall(event);
  const { headers, isAllowed } = buildCorsHeaders(origin, internal);

  if (event.httpMethod === 'OPTIONS') return { statusCode:204, ...headers };
  if (event.httpMethod !== 'POST') return { statusCode:405, body:'Method Not Allowed', ...headers };
  if (!isAllowed) return { statusCode:403, body:'Forbidden by CORS', ...headers };

  try {
    const token = process.env.TG_BOT_TOKEN;
    if (!token) return { statusCode:500, body:'TG_BOT_TOKEN is not set', ...headers };

    let parsed = {};
    try { parsed = JSON.parse(event.body || '{}') || {}; } catch { parsed = {}; }

    const { chat_id: clientChatId, type, orderId, shortId, title, text } = parsed;
    if (!type) return { statusCode:400, body:'type required', ...headers };

    const webappUrl = process.env.WEBAPP_URL || '';

    const safeTitle = (t)=> (t ? String(t).slice(0,140) : '').trim();
    const goods = safeTitle(title) || '—Ç–æ–≤–∞—Ä';
    const kbForType = (t)=>{
      if (!webappUrl) return null;
      if (t==='cashbackMatured') return [[{ text:'–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', web_app:{ url: `${webappUrl}#/cart` } }]];
      if (t==='referralJoined')  return [[{ text:'–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',  web_app:{ url: `${webappUrl}#/account/referrals` } }]];
      if (t==='referralOrderCashback') return [[{ text:'–ú–æ–π –∫—ç—à–±–µ–∫', web_app:{ url: `${webappUrl}#/account/cashback` } }]];
      return [[{ text:'–ú–æ–∏ –∑–∞–∫–∞–∑—ã', web_app:{ url: `${webappUrl}#/orders` } }]];
    };

    const displayOrderId = makeDisplayOrderId(orderId, shortId);
    const hint = '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.';
    const about = displayOrderId ? `–ó–∞–∫–∞–∑ #${displayOrderId}${goods ? ` ‚Äî ¬´${goods}¬ª` : ''}.` : (goods ? `–ü–æ —Ç–æ–≤–∞—Ä—É ¬´${goods}¬ª.` : '');

    let finalText;
    if (typeof text==='string' && text.trim()){ finalText = text.trim(); }
    else {
      switch(type){
        case 'orderPlaced':             finalText = `–û—Ñ–æ—Ä–º–ª–µ–Ω ${about} ${hint}`; break;
        case 'orderAccepted':           finalText = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ${about} ${hint}`; break;
        case 'statusChanged':           finalText = `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω. ${about} ${hint}`; break;
        case 'orderCanceled':           finalText = `–û—Ç–º–µ–Ω—ë–Ω ${about} ${hint}`; break;
        case 'cartReminder':            finalText = `–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ. ${hint}`; break;
        case 'favReminder':             finalText = `–£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. ${hint}`; break;
        case 'referralJoined':          finalText = `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. ${hint}`; break;
        case 'referralOrderCashback':   finalText = `üí∏ –ó–∞–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –Ω–∞—á–∏—Å–ª–µ–Ω–æ 5% –∫—ç—à–±–µ–∫–∞ (–æ–∂–∏–¥–∞–µ—Ç ~24—á). ${hint}`; break;
        case 'cashbackMatured':         finalText = `‚úÖ –ö—ç—à–±–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–ª—ã –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.`; break;
        default:                        finalText = `${about} ${hint}`;
      }
    }
    const kb = kbForType(type);

    // INTERNAL: –º–æ–∂–Ω–æ —Å–ª–∞—Ç—å –ø—Ä—è–º–æ –ø–æ chat_id (–ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏–ª–∏ –∞–¥–º–∏–Ω–∞–º)
    if (internal) {
      if (clientChatId) {
        await sendTg(token, String(clientChatId), finalText, kb, type);
        return { statusCode:200, body: JSON.stringify({ ok:true }), ...headers };
      }
      const adminChatIds = String(process.env.ADMIN_CHAT_ID || '').split(',').map(s=>s.trim()).filter(Boolean);
      if (adminChatIds.length) {
        const results = await Promise.allSettled(adminChatIds.map(id => sendTg(token, String(id), finalText, kb, type)));
        const anyOk = results.some(r => r.status==='fulfilled');
        if (!anyOk) return { statusCode:502, body: JSON.stringify({ ok:false, error:'telegram failed for all admins' }), ...headers };
        return { statusCode:200, body: JSON.stringify({ ok:true }), ...headers };
      }
      return { statusCode:400, body:'chat_id required', ...headers };
    }

    // –í–ù–ï–®–ù–ò–ï –í–´–ó–û–í–´: —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ initData
    const isMarketing = (type==='cartReminder' || type==='favReminder');
    if (isMarketing || ORDER_ONLY_USER.has(type)) {
      const rawInit = event.headers?.['x-tg-init-data'] || event.headers?.['X-Tg-Init-Data'] || '';
      const { uid } = verifyTgInitData(rawInit);
      if (!clientChatId || String(clientChatId)!==uid) {
        return { statusCode:403, body: JSON.stringify({ ok:false, error:'chat_id mismatch or missing' }), ...headers };
      }
      await sendTg(token, String(uid), finalText, kb, type);
      return { statusCode:200, body: JSON.stringify({ ok:true }), ...headers };
    }

    return { statusCode:403, body: JSON.stringify({ ok:false, error:'forbidden' }), ...headers };
  } catch (err) {
    console.error('[notify] handler error:', err);
    return { statusCode:500, body: JSON.stringify({ ok:false, error:String(err) }), ...headers };
  }
}
