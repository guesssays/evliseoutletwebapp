// netlify/functions/mkt-pings.js
// –ö—Ä–æ–Ω: 20:00‚Äì22:59 Asia/Tashkent (15‚Äì17 UTC).
// –ë–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ users-data –∏ —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ notify (INTERNAL).
// –§—É–ª–ª—Å–∫—Ä–∏–Ω –¥–∞—ë—Ç notify.js, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç tg://resolve?domain=<bot>&startapp.

export const config = { schedule: '*/15 15-17 * * *' };

const USERS_DATA_ENDPOINT = '/.netlify/functions/users-data';
const NOTIFY_ENDPOINT     = '/.netlify/functions/notify';

/* ---------- small utils ---------- */
function dayKey(ts){
  const d = new Date(ts || Date.now());
  return `${d.getUTCFullYear()}-${d.getUTCMonth()+1}-${d.getUTCDate()}`; // UTC day (–í–ê–ñ–ù–û!)
}

async function httpJSON(base, path, { method='GET', body=null, headers={} } = {}){
  const url = new URL(path, base).toString();
  const r = await fetch(url, {
    method,
    headers: { 'Content-Type':'application/json', ...headers },
    body: body ? JSON.stringify(body) : undefined
  });
  let j = {};
  try { j = await r.json(); } catch {}
  if (!r.ok || j?.ok === false) {
    const msg = j?.error || `${r.status} ${r.statusText}`;
    throw new Error(`[${method} ${url}] ${msg}`);
  }
  return j;
}

async function postNotify(base, payload){
  // INTERNAL: notify –ø—Ä–æ–≤–µ—Ä—è–µ—Ç X-Internal-Auth === ADMIN_API_TOKEN
  const token = process.env.ADMIN_API_TOKEN || '';
  const headers = token ? { 'X-Internal-Auth': token } : {};
  return httpJSON(base, NOTIFY_ENDPOINT, { method:'POST', body: payload, headers });
}
async function getUsers(base){
  const j = await httpJSON(base, USERS_DATA_ENDPOINT, { method:'GET' });
  return Array.isArray(j.users) ? j.users : [];
}
async function patchUser(base, uid, patch){
  return httpJSON(base, USERS_DATA_ENDPOINT, { method:'POST', body: { uid, ...patch } });
}

/* ---------- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ---------- */
const CART_VARIANTS = [
  ({title, count}) => `–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –∂–¥—ë—Ç: ¬´${title}¬ª${count>1?` + –µ—â—ë ${count-1}`:''}. –û—Ñ–æ—Ä–º–∏–º?`,
  ({title})        => `–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ ¬´${title}¬ª? –í—Å–µ–≥–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤ –¥–æ –∑–∞–∫–∞–∑–∞ ‚ú®`,
  ({title})        => `¬´${title}¬ª –≤—Å—ë –µ—â—ë –≤ –∫–æ—Ä–∑–∏–Ω–µ. –í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É?`,
  ({title})        => `–ß—É—Ç—å-—á—É—Ç—å –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–æ –ø–æ–∫—É–ø–∫–∏: ¬´${title}¬ª. –ú—ã –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏!`,
  ({title})        => `–ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å ‚Äî ¬´${title}¬ª –∂–¥—ë—Ç –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üëÄ`,
  ({title})        => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤ –∫–æ—Ä–∑–∏–Ω–µ ¬´${title}¬ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ!`,
  ({title})        => `–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑? ¬´${title}¬ª —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ.`,
  ({title, count}) => `–ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ: ¬´${title}¬ª${count>1?` –∏ –µ—â—ë ${count-1}`:''}. –£—Å–ø–µ–µ–º —Å–µ–≥–æ–¥–Ω—è?`,
];
const FAV_VARIANTS = [
  () => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ üëÄ`,
  () => `–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–µ–∂–∞—Ç –≤–∞—à–∏ –Ω–∞—Ö–æ–¥–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ú®`,
  () => `–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É ‚Äî –≤–¥—Ä—É–≥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏?`,
  () => `–õ—é–±–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∂–¥—É—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!`,
  () => `–°–¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥? –û—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä.`,
  () => `–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä—ã.`,
];
function pickVariant(list, currentIdx){
  const len = list.length || 1;
  const idx = Number.isInteger(currentIdx) ? ((currentIdx % len)+len)%len : 0;
  const build = list[idx] || (() => '');
  const nextIdx = (idx + 1) % len;
  return { build, nextIdx };
}

/* ---------- helpers ---------- */
function ok(body, code = 200){
  return {
    statusCode: code,
    headers: { 'Content-Type': 'application/json; charset=utf-8' },
    body: JSON.stringify(body)
  };
}
function bad(msg, code = 500){
  return ok({ ok:false, error:String(msg) }, code);
}

/* ---------- handler: –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç ---------- */
export async function handler(event){
  try{
    const base = (process.env.URL || process.env.DEPLOY_URL || '').replace(/\/+$/, '');
    if (!base)                         return bad('no base url (process.env.URL/DEPLOY_URL)');
    if (!process.env.TG_BOT_TOKEN)     return bad('TG_BOT_TOKEN missing');
    if (!process.env.ADMIN_API_TOKEN)  console.warn('[mkt-pings] ADMIN_API_TOKEN is not set ‚Äî notify INTERNAL may 403');

    // –§–∏–ª—å—Ç—Ä –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ uid: /.netlify/functions/mkt-pings?uid=123
    const onlyUid = (() => {
      try { return new URLSearchParams(event?.queryStringParameters).get('uid'); } catch { return null; }
    })();

    const now = Date.now();
    const today = dayKey(now);
    const THREE_DAYS = 3*24*60*60*1000;

    const users = await getUsers(base);
    const results = [];

    let sent = 0, considered = 0;

    for (const u of users) {
      if (onlyUid && String(u.uid) !== String(onlyUid)) continue;

      const info = {
        uid: u.uid,
        chatId: u.chatId,
        hasCart: false,
        hasFav: false,
        didCart: false,
        didFav: false,
        skipped: [],
        errors: []
      };

      const chatId = String(u.chatId || '').trim();
      if (!/^\d+$/.test(chatId)) {
        info.skipped.push('no_chat_id');
        results.push(info);
        continue;
      }

      const cart = Array.isArray(u.cart) ? u.cart : [];
      const favs = Array.isArray(u.favorites) ? u.favorites : [];
      const hasCart = cart.length > 0;
      const hasFav  = favs.length > 0;
      info.hasCart = hasCart; info.hasFav = hasFav;

      if (!hasCart && !hasFav) {
        info.skipped.push('no_cart_and_no_fav');
        results.push(info);
        continue;
      }
      considered++;

      // –ö–æ—Ä–∑–∏–Ω–∞: 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (UTC)
      if (hasCart) {
        if (u.lastCartReminderDay === today) {
          info.skipped.push('cart_already_sent_today_UTC');
        } else {
          try{
            const first = cart[0];
            const title = String(first?.title || '—Ç–æ–≤–∞—Ä').slice(0, 140);
            const count = cart.length;

            const { build, nextIdx } = pickVariant(CART_VARIANTS, u.cartVariantIdx || 0);
            const text = build({ title, count });

            await postNotify(base, { type: 'cartReminder', chat_id: chatId, title, text });
            await patchUser(base, u.uid, { lastCartReminderDay: today, cartVariantIdx: nextIdx });

            info.didCart = true;
            sent++;
          } catch (e) {
            info.errors.push(`cart:${e?.message||e}`);
          }
        }
      }

      // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: —Ä–∞–∑ –≤ 3 –¥–Ω—è
      if (hasFav) {
        if (Number(u.lastFavReminderTs || 0) + THREE_DAYS > now) {
          info.skipped.push('fav_cooldown_active');
        } else {
          try{
            const { build, nextIdx } = pickVariant(FAV_VARIANTS, u.favVariantIdx || 0);
            const text = build({});
            await postNotify(base, { type: 'favReminder', chat_id: chatId, text });
            await patchUser(base, u.uid, { lastFavReminderTs: now, favVariantIdx: nextIdx });

            info.didFav = true;
            sent++;
          } catch (e) {
            info.errors.push(`fav:${e?.message||e}`);
          }
        }
      }

      results.push(info);
    }

    // –õ–æ–≥–∏ (—Å–∂–∞—Ç—ã–µ), —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–¥–∫—É –≤ Netlify logs
    try {
      const summary = {
        users: users.length,
        considered,
        sent,
        errs: results.reduce((n, r) => n + (r.errors.length ? 1 : 0), 0)
      };
      console.log('[mkt-pings] summary', summary);
    } catch {}

    return ok({ ok:true, users: users.length, considered, sent, results, todayUTC: today });
  } catch (e) {
    console.error('[mkt-pings] fatal', e);
    return bad(e?.message || e, 500);
  }
}
