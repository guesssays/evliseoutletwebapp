// netlify/functions/mkt-pings.js
// –ö—Ä–æ–Ω-—Ñ—É–Ω–∫—Ü–∏—è: –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram-–±–æ—Ç,
// –∏—Å–ø–æ–ª—å–∑—É—è —Å–Ω–∞–ø—à–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Blobs –∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é /notify.
//
// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 20:00‚Äì22:59 –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É (UTC+5) -> 15:00‚Äì17:59 UTC, –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.

import { getStore } from '@netlify/blobs';

const NOTIFY_ENDPOINT = '/.netlify/functions/notify';
export const config = { schedule: '*/15 15-17 * * *' };

/* –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è dayKey "–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å" (UTC –Ω–æ—Ä–º –¥–ª—è –Ω–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) */
function dayKey(ts){
  const d = new Date(ts || Date.now());
  return `${d.getUTCFullYear()}-${d.getUTCMonth()+1}-${d.getUTCDate()}`;
}

async function postNotify(originUrl, payload){
  const url = new URL(NOTIFY_ENDPOINT, originUrl).toString();
  const res = await fetch(url, {
    method:'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const t = await res.text().catch(()=> '');
    throw new Error(`notify failed: ${res.status} ${t}`);
  }
}

/* ---------------- –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤ ---------------- */

// –ö–æ—Ä–∑–∏–Ω–∞: —Ñ—É–Ω–∫—Ü–∏–∏-—à–∞–±–ª–æ–Ω—ã (–ø–æ–ª—É—á–∞—é—Ç title –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π)
const CART_VARIANTS = [
  ({title, count}) => `–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –∂–¥—ë—Ç: ¬´${title}¬ª${count>1?` + –µ—â—ë ${count-1}`:''}. –û—Ñ–æ—Ä–º–∏–º?`,
  ({title})        => `–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ ¬´${title}¬ª? –í—Å–µ–≥–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤ –¥–æ –∑–∞–∫–∞–∑–∞ ‚ú®`,
  ({title})        => `¬´${title}¬ª –≤—Å—ë –µ—â—ë –≤ –∫–æ—Ä–∑–∏–Ω–µ. –í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É?`,
  ({title})        => `–ß—É—Ç—å-—á—É—Ç—å –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–æ –ø–æ–∫—É–ø–∫–∏: ¬´${title}¬ª. –ú—ã –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏!`,
  ({title})        => `–ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å ‚Äî ¬´${title}¬ª –∂–¥—ë—Ç –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üëÄ`,
  ({title})        => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤ –∫–æ—Ä–∑–∏–Ω–µ ¬´${title}¬ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ!`,
  ({title})        => `–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑? ¬´${title}¬ª —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ.`,
  ({title, count}) => `–ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ: ¬´${title}¬ª${count>1?` –∏ –µ—â—ë ${count-1}`:''}. –£—Å–ø–µ–µ–º —Å–µ–≥–æ–¥–Ω—è?`,
];

// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: —Å–µ—Ä–≤–µ—Ä—É –∏–∑–≤–µ—Å—Ç–Ω—ã —Ç–æ–ª—å–∫–æ id, –ø–æ—ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
const FAV_VARIANTS = [
  () => `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ üëÄ`,
  () => `–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–µ–∂–∞—Ç –≤–∞—à–∏ –Ω–∞—Ö–æ–¥–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ú®`,
  () => `–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É ‚Äî –≤–¥—Ä—É–≥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏?`,
  () => `–õ—é–±–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∂–¥—É—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!`,
  () => `–°–¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥? –û—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä.`,
  () => `–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä—ã.`,
];

/* –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–¥—Ä—è–¥ */
function pickVariant(list, currentIdx){
  const len = list.length;
  if (len === 0) return { idx: 0, build: () => '' };

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
  let idx = Number.isInteger(currentIdx) ? currentIdx : 0;
  idx = ((idx % len) + len) % len;

  const build = list[idx];
  const nextIdx = (idx + 1) % len;
  return { idx, nextIdx, build };
}

export async function handler(){
  try{
    const siteUrl = process.env.URL || process.env.DEPLOY_URL || 'https://evliseoutlet.netlify.app/';
    const users = getStore('users');

    const listed = await users.list({ prefix:'user__', paginate:false }).catch(()=>null);
    const blobs = listed?.blobs || [];
    if (!blobs.length){
      return { statusCode:200, body: JSON.stringify({ ok:true, sent:0, count:0 }) };
    }

    let sent = 0;
    const now = Date.now();
    const today = dayKey(now);

    for (const entry of blobs){
      const u = await users.get(entry.key, { type:'json', consistency:'strong' }).catch(()=>null);
      if (!u || !u.chatId) continue;

      const hasCart = Array.isArray(u.cart) && u.cart.length > 0;
      const hasFav  = Array.isArray(u.favorites) && u.favorites.length > 0;

      // –ö–æ—Ä–∑–∏–Ω–∞ ‚Äî –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
      if (hasCart && u.lastCartReminderDay !== today){
        const first = u.cart[0];
        const title = String(first?.title || '—Ç–æ–≤–∞—Ä').slice(0,140);
        const count = u.cart.length;

        // –ø–æ–¥–±–µ—Ä—ë–º —Ñ—Ä–∞–∑—É
        const { build, nextIdx } = pickVariant(CART_VARIANTS, u.cartVariantIdx || 0);
        const text = build({ title, count });

        await postNotify(siteUrl, {
          type: 'cartReminder',
          chat_id: String(u.chatId),
          title, // –æ—Ç–ø—Ä–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ö–æ—Ç—è —Ç–µ–∫—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤
          text,
        });

        u.lastCartReminderDay = today;
        u.cartVariantIdx = nextIdx; // —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        sent++;
      }

      // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚Äî —Ä–∞–∑ –≤ 3 –¥–Ω—è
      const THREE_DAYS = 3*24*60*60*1000;
      if (hasFav && Number(u.lastFavReminderTs || 0) + THREE_DAYS <= now){
        const { build, nextIdx } = pickVariant(FAV_VARIANTS, u.favVariantIdx || 0);
        const text = build({});

        await postNotify(siteUrl, {
          type: 'favReminder',
          chat_id: String(u.chatId),
          text,
        });

        u.lastFavReminderTs = now;
        u.favVariantIdx = nextIdx;
        sent++;
      }

      await users.setJSON(entry.key, u);
    }

    return { statusCode:200, body: JSON.stringify({ ok:true, sent, count: blobs.length }) };
  }catch(e){
    return { statusCode:500, body: JSON.stringify({ ok:false, error:String(e) }) };
  }
}
