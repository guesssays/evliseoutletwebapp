// src/core/scroll-memory-home.js
// –ü–∞–º—è—Ç—å —Å–∫—Ä–æ–ª–ª–∞ –≥–ª–∞–≤–Ω–æ–π

/* ===== —É—Ç–∏–ª–∏—Ç—ã ===== */
function isHome() {
  // –ì–ª–∞–≤–Ω–∞—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ö—ç—à –ø—É—Å—Ç–æ–π, '#', '#/', –∏–ª–∏ '#/?...'
  const raw = String(location.hash || '');
  if (raw === '' || raw === '#') return true;

  let path = raw.slice(1);          // —É–±–∏—Ä–∞–µ–º '#'
  const [pure, query=''] = path.split('?');
  const clean = String(pure || '').replace(/^\/+/, ''); // —Å—Ä–µ–∑–∞–µ–º –≤–µ–¥—É—â–∏–µ '/'

  // –ø—É—Å—Ç–æ–π –ø—É—Ç—å ('' –∏–ª–∏ '/'), –ª—é–±—ã–µ query –ø–æ–≤–µ—Ä—Ö –∫–æ—Ä–Ω—è ‚Äî —Å—á–∏—Ç–∞–µ–º –≥–ª–∞–≤–Ω–æ–π
  if (clean === '' && (query === '' || query.length >= 0)) return true;

  return false;
}

function classicCandidates(){
  const arr = [];
  if (document.scrollingElement) arr.push(document.scrollingElement);
  const view = document.getElementById('view'); if (view) arr.push(view);
  const app  = document.getElementById('app');  if (app)  arr.push(app);
  arr.push(window);
  return arr;
}

function getScrollTargets(){
  const out = new Set(classicCandidates());
  return Array.from(out);
}

function getScrollY(){
  let maxY = 0;
  for (const c of getScrollTargets()){
    if (c === window){
      const y = window.scrollY || document.documentElement.scrollTop || document.body.scrollTop || 0;
      if (y > maxY) maxY = y;
    } else if (c && c.scrollHeight > c.clientHeight){
      const y = c.scrollTop || 0;
      if (y > maxY) maxY = y;
    }
  }
  return maxY;
}

function scrollToY(y){
  for (const c of getScrollTargets()){
    if (c === window){
      try { window.scrollTo({ top: y, behavior: 'auto' }); } catch {}
    } else if (c && c.scrollHeight > c.clientHeight){
      try { c.scrollTo({ top: y, behavior: 'auto' }); } catch {}
    }
  }
}

function afterImagesIn(el) {
  if (!el) return Promise.resolve();
  const imgs = [...el.querySelectorAll('img')];
  const pending = imgs
    .filter(img => !img.complete || img.naturalWidth === 0)
    .map(img => new Promise(res => {
      const done = () => { img.removeEventListener('load', done); img.removeEventListener('error', done); res(); };
      img.addEventListener('load', done, { once: true });
      img.addEventListener('error', done, { once: true });
    }));
  return Promise.race([
    Promise.all(pending),
    new Promise(res => setTimeout(res, 350))
  ]);
}

const KEY = 'home:scrollY';

export const HomeScrollMemory = {
  saveIfHome() {
    if (!isHome()) return;
    const y = getScrollY();
    try { sessionStorage.setItem(KEY, String(Math.max(0, y|0))); } catch {}
  },

  clear() {
    try { sessionStorage.removeItem(KEY); } catch {}
  },

  async restoreIfHome() {
    // –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if (!isHome()) return;

    let y = 0;
    try { y = Number(sessionStorage.getItem(KEY) || 0) || 0; } catch {}
    if (y <= 0) return;

    try {
      // –±–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å–±—Ä–æ—Å—ã –Ω–∞ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      window.__HOME_WILL_RESTORE__ = true;
      window.ScrollReset?.quiet?.(1500);
      window.ScrollReset?.suppress?.(1500);
    } catch {}

    try {
      // –¥–∞—Ç—å DOM –¥–æ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
      await new Promise(r => requestAnimationFrame(r));

      // üîÅ –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å—ë –µ—â—ë –Ω–∞ –≥–ª–∞–≤–Ω–æ–π (–º–æ–≥–ª–∏ —É—Å–ø–µ—Ç—å —É–π—Ç–∏)
      if (!isHome()) return;

      const view = document.getElementById('view') || document.body;

      // ¬´–ø–æ–¥–∫–∞—á–∫–∞¬ª –≤ –æ–±–ª–∞—Å—Ç—å
      scrollToY(Math.max(0, y - 1));

      // –∂–¥—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
      await afterImagesIn(view);

      // –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ—Å—Ç—Ä–µ–ª –ø–æ–∑–∏—Ü–∏–∏
      scrollToY(y);
      await new Promise(r => requestAnimationFrame(r));
      scrollToY(y);
    } finally {
      try { window.__HOME_WILL_RESTORE__ = false; } catch {}
    }
  },

  mount(router) {
    // –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∏–∫–æ–≤: —É—Ö–æ–¥–∏–º —Å –≥–ª–∞–≤–Ω–æ–π ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –î–û –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.addEventListener('click', (e)=>{
      const a = e.target.closest('a[href^="#/"]');
      if (!a) return;
      if (!isHome()) return;

      const href = String(a.getAttribute('href')||'');
      if (href !== '#/' && href !== '#') {
        this.saveIfHome();
      }
    }, { capture: true });

    let usedRouter = false;
    try {
      if (router && typeof router.on === 'function') {
        usedRouter = true;
        router.on('before-navigate', () => { this.saveIfHome(); });
        window.addEventListener('view:home-mounted', () => { this.restoreIfHome(); });
        router.on('after-navigate', () => { this.restoreIfHome(); });
      }
    } catch {}

    if (!usedRouter) {
      let lastIsHome = isHome();
      window.addEventListener('hashchange', () => {
        const wasHome = lastIsHome;
        const nowHome = isHome();
        if (wasHome && !nowHome) {
          this.saveIfHome();
        } else if (!wasHome && nowHome) {
          this.restoreIfHome();
        }
        lastIsHome = nowHome;
      });
    }

    setTimeout(() => this.restoreIfHome(), 0);

    window.addEventListener('pageshow', (e) => {
      if (e && e.persisted) {
        setTimeout(() => this.restoreIfHome(), 0);
      }
    });
  }
};
